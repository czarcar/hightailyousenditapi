<?php
/*
 * HightailYouSendItAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace HightailYouSendItAPILib\Controllers;

use HightailYouSendItAPILib\APIException;
use HightailYouSendItAPILib\APIHelper;
use HightailYouSendItAPILib\Configuration;
use HightailYouSendItAPILib\Models;
use HightailYouSendItAPILib\Exceptions;
use HightailYouSendItAPILib\Http\HttpRequest;
use HightailYouSendItAPILib\Http\HttpResponse;
use HightailYouSendItAPILib\Http\HttpMethod;
use HightailYouSendItAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class SendReceiveTrackAPIsController extends BaseController {

    /**
     * @var SendReceiveTrackAPIsController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return SendReceiveTrackAPIsController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Get upload URLs of the new items
     * @param  string      $recipients         Required parameter: Email address of the recipients
     * @param  integer     $filecount          Required parameter: Number of files to upload
     * @param  string      $subject            Required parameter: Subject for the email sent to the recipients
     * @param  string      $message            Required parameter: Message body for the email sent to the recipients
     * @param  string      $verifyIdentity     Required parameter: Verify recipient's identity (Acceptable values are: "false", "true")
     * @param  string      $returnReceipt      Required parameter: Request return receipt on file download (Acceptable values are: "false", "true")
     * @param  string      $password           Required parameter: Password for the file
     * @param  string      $xAuthToken         Required parameter: Authentication token returned by the Login method
     * @param  string      $accept             Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSend (
                $recipients,
                $filecount,
                $subject,
                $message,
                $verifyIdentity,
                $returnReceipt,
                $password,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/send';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'recipients'     => $recipients,
            'filecount'      => $filecount,
            'subject'        => $subject,
            'message'        => $message,
            'verifyIdentity' => $verifyIdentity,
            'returnReceipt'  => $returnReceipt,
            'password'       => $password,
            'X-Auth-Token'   => $xAuthToken,
            'Accept'         => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Finish upload
     * @param  string      $itemID                     Required parameter: Item id to get info for
     * @param  string      $sendEmailNotifications     Required parameter: Send email with file link to the recipients (Acceptable values are: "true", "false")
     * @param  integer     $expiration                 Required parameter: File expiration in minutes. 0 means never expire the files
     * @param  string      $xAuthToken                 Required parameter: Authentication token returned by the Login method
     * @param  string      $accept                     Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createCommit (
                $itemID,
                $sendEmailNotifications,
                $expiration,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/commit/{itemID}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'itemID'                 => $itemID,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'sendEmailNotifications' => $sendEmailNotifications,
            'expiration'             => $expiration,
            'X-Auth-Token'           => $xAuthToken,
            'Accept'                 => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'           => 'APIMATIC 2.0',
            'Accept'               => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Get upload status (progress)
     * @param  string     $uploadUrl        Required parameter: URL obtained from PrepareSend
     * @param  string     $xAuthToken       Required parameter: Authentication token returned by the Login method
     * @param  string     $accept           Required parameter: Output format as JSON orXML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getStatus (
                $uploadUrl,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/status';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'uploadUrl'    => $uploadUrl,
            'X-Auth-Token' => $xAuthToken,
            'Accept'       => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Get upload status (progress)
     * @param  string      $sentItems            Required parameter: Get only sent items or all items (Acceptable values are: "true", "false")
     * @param  string      $filter               Required parameter: Get all, expired or unexpired items (Acceptable values are: "all", "expired", "unexpired")
     * @param  string      $includeFileInfo      Required parameter: Get the detailed file info (Acceptable values are: "false", "true")
     * @param  string      $includeTracking      Required parameter: Get tracking info for the files. Need includeFileInfo to be true for this to work. (Acceptable values are: "false", "true")
     * @param  integer     $page                 Required parameter: Get the specified page number
     * @param  integer     $pageLength           Required parameter: Get specified number of items in the page - max 100
     * @param  string      $xAuthToken           Required parameter: Authentication token returned by the Login method
     * @param  string      $accept               Required parameter: Output format as JSON orXML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function mlist (
                $sentItems,
                $filter,
                $includeFileInfo,
                $includeTracking,
                $page,
                $pageLength,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/list';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'sentItems'        => $sentItems,
            'filter'           => $filter,
            'includeFile Info' => $includeFileInfo,
            'includeTracking'  => $includeTracking,
            'page'             => $page,
            'pageLength'       => $pageLength,
            'X-Auth-Token'     => $xAuthToken,
            'Accept'           => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'     => 'APIMATIC 2.0',
            'Accept'         => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Get number of sent or received items
     * @param  string     $sentItmes        Required parameter: If true, get only the count of sent items (Acceptable values are: "true", "false")
     * @param  string     $filter           Required parameter: Get all, expired or unexpired items (Acceptable values are: "all", "expired", "unexpired")
     * @param  string     $xAuthToken       Required parameter: Authentication token returned by the Login method
     * @param  string     $accept           Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getCount (
                $sentItmes,
                $filter,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/count';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'sentItmes'    => $sentItmes,
            'filter'       => $filter,
            'X-Auth-Token' => $xAuthToken,
            'Accept'       => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Get item info
     * @param  string     $itemID           Required parameter: Item id to get info for
     * @param  string     $xAuthToken       Required parameter: Authentication token returned by the Login method
     * @param  string     $accept           Required parameter: Output format as JSON orXML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getItem (
                $itemID,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/{itemID}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'itemID'       => $itemID,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'X-Auth-Token' => $xAuthToken,
            'Accept'       => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Change item expiration
     * @param  string      $itemID           Required parameter: Item id to change expiration
     * @param  integer     $expiration       Required parameter: File expiration in minutes
     * @param  string      $xAuthToken       Required parameter: Authentication token returned by the Login method
     * @param  string      $accept           Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createExpiration (
                $itemID,
                $expiration,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/item/expiration/{itemID}';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'itemID'       => $itemID,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'expiration'   => $expiration,
            'X-Auth-Token' => $xAuthToken,
            'Accept'       => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        

}