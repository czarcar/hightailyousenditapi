<?php
/*
 * HightailYouSendItAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace HightailYouSendItAPILib\Controllers;

use HightailYouSendItAPILib\APIException;
use HightailYouSendItAPILib\APIHelper;
use HightailYouSendItAPILib\Configuration;
use HightailYouSendItAPILib\Models;
use HightailYouSendItAPILib\Exceptions;
use HightailYouSendItAPILib\Http\HttpRequest;
use HightailYouSendItAPILib\Http\HttpResponse;
use HightailYouSendItAPILib\Http\HttpMethod;
use HightailYouSendItAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class UserAPIsController extends BaseController {

    /**
     * @var UserAPIsController The reference to *Singleton* instance of this class
     */
    private static $instance;
    
    /**
     * Returns the *Singleton* instance of this class.
     * @return UserAPIsController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Login the user
     * @param  string     $email        Required parameter: Email address of the user
     * @param  string     $password     Required parameter: Password of the user
     * @param  string     $accept       Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createAuth (
                $email,
                $password,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/auth';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'email'    => $email,
            'password' => $password,
            'Accept'   => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Create new user
     * @param  string     $email            Required parameter: Email address of the new user
     * @param  string     $password         Required parameter: Password of the new user
     * @param  string     $firstname        Required parameter: First name of the new user
     * @param  string     $lastname         Required parameter: Last name of the user
     * @param  string     $xAuthToken       Required parameter: Authentication token returned by the Login method
     * @param  string     $accept           Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createUser (
                $email,
                $password,
                $firstname,
                $lastname,
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/user';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'email'        => $email,
            'password'     => $password,
            'firstname'    => $firstname,
            'lastname'     => $lastname,
            'X-Auth-Token' => $xAuthToken,
            'Accept'       => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        
    /**
     * Get policy info for the user
     * @param  string     $xAuthToken       Required parameter: Authentication token returned by the Login method
     * @param  string     $accept           Required parameter: Output format as JSON or XML (Acceptable values are: "application/xml", "application/json")
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getPolicy (
                $xAuthToken,
                $accept) 
    {
        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/v1/policy';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'X-Auth-Token' => $xAuthToken,
            'Accept'       => $accept,
            'apiKey' => Configuration::$apiKey,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json'
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse,$_httpContext);

        return $response->body;
    }
        

}